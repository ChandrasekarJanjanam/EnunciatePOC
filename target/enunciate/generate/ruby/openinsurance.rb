#
# 
#
# Generated by <a href="http://enunciate.codehaus.org">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end


module Com

module Ibm

module Openinsurance

module Domain

  # The Class Claim.
  class Claim 

    # the claimId
    attr_accessor :claimId
    # the claimDescription
    attr_accessor :claimDescription

    # the json hash for this Claim
    def to_jaxb_json_hash
      _h = {}
      _h['claimId'] = claimId.to_jaxb_json_hash unless claimId.nil?
      _h['claimDescription'] = claimDescription.to_jaxb_json_hash unless claimDescription.nil?
      return _h
    end

    # the json (string form) for this Claim
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Claim with a json hash
    def init_jaxb_json_hash(_o)
      @claimId = String.from_json(_o['claimId']) unless _o['claimId'].nil?
      @claimDescription = String.from_json(_o['claimDescription']) unless _o['claimDescription'].nil?
    end

    # constructs a Claim from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class Driver.
  class Driver 

    # the driverId
    attr_accessor :driverId
    # the driverName
    attr_accessor :driverName
    # the gender
    attr_accessor :gender
    # the driverPhoto
    attr_accessor :driverPhoto
    # the dateOfBirth
    attr_accessor :dateOfBirth
    # the driverLicenseNumber
    attr_accessor :driverLicenseNumber
    # the driverClass
    attr_accessor :driverClass
    # the address
    attr_accessor :address
    # the eyeColor
    attr_accessor :eyeColor
    # the height
    attr_accessor :height
    # the dateOfIssue
    attr_accessor :dateOfIssue
    # the expiryDate
    attr_accessor :expiryDate
    # the licensePhoto
    attr_accessor :licensePhoto

    # the json hash for this Driver
    def to_jaxb_json_hash
      _h = {}
      _h['driverId'] = driverId.to_jaxb_json_hash unless driverId.nil?
      _h['driverName'] = driverName.to_jaxb_json_hash unless driverName.nil?
      _h['gender'] = gender.to_jaxb_json_hash unless gender.nil?
      _h['driverPhoto'] = driverPhoto.to_jaxb_json_hash unless driverPhoto.nil?
      _h['dateOfBirth'] = dateOfBirth.to_jaxb_json_hash unless dateOfBirth.nil?
      _h['driverLicenseNumber'] = driverLicenseNumber.to_jaxb_json_hash unless driverLicenseNumber.nil?
      _h['driverClass'] = driverClass.to_jaxb_json_hash unless driverClass.nil?
      _h['address'] = address.to_jaxb_json_hash unless address.nil?
      _h['eyeColor'] = eyeColor.to_jaxb_json_hash unless eyeColor.nil?
      _h['height'] = height.to_jaxb_json_hash unless height.nil?
      _h['dateOfIssue'] = dateOfIssue.to_jaxb_json_hash unless dateOfIssue.nil?
      _h['expiryDate'] = expiryDate.to_jaxb_json_hash unless expiryDate.nil?
      _h['licensePhoto'] = licensePhoto.to_jaxb_json_hash unless licensePhoto.nil?
      return _h
    end

    # the json (string form) for this Driver
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Driver with a json hash
    def init_jaxb_json_hash(_o)
      @driverId = String.from_json(_o['driverId']) unless _o['driverId'].nil?
      @driverName = String.from_json(_o['driverName']) unless _o['driverName'].nil?
      @gender = String.from_json(_o['gender']) unless _o['gender'].nil?
      @driverPhoto = String.from_json(_o['driverPhoto']) unless _o['driverPhoto'].nil?
      @dateOfBirth = Time.from_json(_o['dateOfBirth']) unless _o['dateOfBirth'].nil?
      @driverLicenseNumber = String.from_json(_o['driverLicenseNumber']) unless _o['driverLicenseNumber'].nil?
      @driverClass = String.from_json(_o['driverClass']) unless _o['driverClass'].nil?
      @address = String.from_json(_o['address']) unless _o['address'].nil?
      @eyeColor = String.from_json(_o['eyeColor']) unless _o['eyeColor'].nil?
      @height = String.from_json(_o['height']) unless _o['height'].nil?
      @dateOfIssue = Time.from_json(_o['dateOfIssue']) unless _o['dateOfIssue'].nil?
      @expiryDate = Time.from_json(_o['expiryDate']) unless _o['expiryDate'].nil?
      @licensePhoto = String.from_json(_o['licensePhoto']) unless _o['licensePhoto'].nil?
    end

    # constructs a Driver from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class IdCardDetails.
  class IdCardDetails 

    # the vehicle
    attr_accessor :vehicle
    # the policy
    attr_accessor :policy
    # the insuredPersons
    attr_accessor :insuredPersons

    # the json hash for this IdCardDetails
    def to_jaxb_json_hash
      _h = {}
      _h['vehicle'] = vehicle.to_jaxb_json_hash unless vehicle.nil?
      _h['policy'] = policy.to_jaxb_json_hash unless policy.nil?
      if !insuredPersons.nil?
        _ha = Array.new
        insuredPersons.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['insuredPersons'] = _ha
      end
      return _h
    end

    # the json (string form) for this IdCardDetails
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this IdCardDetails with a json hash
    def init_jaxb_json_hash(_o)
      @vehicle = Com::Ibm::Openinsurance::Domain::Vehicle.from_json(_o['vehicle']) unless _o['vehicle'].nil?
      @policy = Com::Ibm::Openinsurance::Domain::Policy.from_json(_o['policy']) unless _o['policy'].nil?
      if !_o['insuredPersons'].nil?
        @insuredPersons = Array.new
        _oa = _o['insuredPersons']
        _oa.each { | _item | @insuredPersons.push String.from_json(_item) }
      end
    end

    # constructs a IdCardDetails from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class Payment.
  class Payment 

    # the paymentId
    attr_accessor :paymentId
    # the policyId
    attr_accessor :policyId
    # the paymentAmount
    attr_accessor :paymentAmount
    # the paymentType
    attr_accessor :paymentType
    # the paymentDate
    attr_accessor :paymentDate
    # the routingNumber
    attr_accessor :routingNumber
    # the checkingAccountNumber
    attr_accessor :checkingAccountNumber
    # the checkPhotograph
    attr_accessor :checkPhotograph
    # the creditCardNumber
    attr_accessor :creditCardNumber
    # the creditCardName
    attr_accessor :creditCardName
    # the cVSCode
    attr_accessor :CVSCode
    # the creditCardExpiryDate
    attr_accessor :creditCardExpiryDate
    # the debitCardNumber
    attr_accessor :debitCardNumber
    # the debitCardName
    attr_accessor :debitCardName
    # the debitCardPin
    attr_accessor :debitCardPin
    # the debitCardExpiryDate
    attr_accessor :debitCardExpiryDate

    # the json hash for this Payment
    def to_jaxb_json_hash
      _h = {}
      _h['paymentId'] = paymentId.to_jaxb_json_hash unless paymentId.nil?
      _h['policyId'] = policyId.to_jaxb_json_hash unless policyId.nil?
      _h['paymentAmount'] = paymentAmount.to_jaxb_json_hash unless paymentAmount.nil?
      _h['paymentType'] = paymentType.to_jaxb_json_hash unless paymentType.nil?
      _h['paymentDate'] = paymentDate.to_jaxb_json_hash unless paymentDate.nil?
      _h['routingNumber'] = routingNumber.to_jaxb_json_hash unless routingNumber.nil?
      _h['checkingAccountNumber'] = checkingAccountNumber.to_jaxb_json_hash unless checkingAccountNumber.nil?
      _h['checkPhotograph'] = checkPhotograph.to_jaxb_json_hash unless checkPhotograph.nil?
      _h['creditCardNumber'] = creditCardNumber.to_jaxb_json_hash unless creditCardNumber.nil?
      _h['creditCardName'] = creditCardName.to_jaxb_json_hash unless creditCardName.nil?
      _h['CVSCode'] = CVSCode.to_jaxb_json_hash unless CVSCode.nil?
      _h['creditCardExpiryDate'] = creditCardExpiryDate.to_jaxb_json_hash unless creditCardExpiryDate.nil?
      _h['debitCardNumber'] = debitCardNumber.to_jaxb_json_hash unless debitCardNumber.nil?
      _h['debitCardName'] = debitCardName.to_jaxb_json_hash unless debitCardName.nil?
      _h['debitCardPin'] = debitCardPin.to_jaxb_json_hash unless debitCardPin.nil?
      _h['debitCardExpiryDate'] = debitCardExpiryDate.to_jaxb_json_hash unless debitCardExpiryDate.nil?
      return _h
    end

    # the json (string form) for this Payment
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Payment with a json hash
    def init_jaxb_json_hash(_o)
      @paymentId = String.from_json(_o['paymentId']) unless _o['paymentId'].nil?
      @policyId = String.from_json(_o['policyId']) unless _o['policyId'].nil?
      @paymentAmount = Float.from_json(_o['paymentAmount']) unless _o['paymentAmount'].nil?
      @paymentType = String.from_json(_o['paymentType']) unless _o['paymentType'].nil?
      @paymentDate = Time.from_json(_o['paymentDate']) unless _o['paymentDate'].nil?
      @routingNumber = String.from_json(_o['routingNumber']) unless _o['routingNumber'].nil?
      @checkingAccountNumber = String.from_json(_o['checkingAccountNumber']) unless _o['checkingAccountNumber'].nil?
      @checkPhotograph = String.from_json(_o['checkPhotograph']) unless _o['checkPhotograph'].nil?
      @creditCardNumber = String.from_json(_o['creditCardNumber']) unless _o['creditCardNumber'].nil?
      @creditCardName = String.from_json(_o['creditCardName']) unless _o['creditCardName'].nil?
      @CVSCode = String.from_json(_o['CVSCode']) unless _o['CVSCode'].nil?
      @creditCardExpiryDate = Time.from_json(_o['creditCardExpiryDate']) unless _o['creditCardExpiryDate'].nil?
      @debitCardNumber = String.from_json(_o['debitCardNumber']) unless _o['debitCardNumber'].nil?
      @debitCardName = String.from_json(_o['debitCardName']) unless _o['debitCardName'].nil?
      @debitCardPin = String.from_json(_o['debitCardPin']) unless _o['debitCardPin'].nil?
      @debitCardExpiryDate = Time.from_json(_o['debitCardExpiryDate']) unless _o['debitCardExpiryDate'].nil?
    end

    # constructs a Payment from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class Policy.
  class Policy 

    # the policyId
    attr_accessor :policyId
    # the policyType
    attr_accessor :policyType
    # the policyNumber
    attr_accessor :policyNumber
    # the policyEffectiveDate
    attr_accessor :policyEffectiveDate
    # the policyExpirationDate
    attr_accessor :policyExpirationDate
    # the policyPremium
    attr_accessor :policyPremium

    # the json hash for this Policy
    def to_jaxb_json_hash
      _h = {}
      _h['policyId'] = policyId.to_jaxb_json_hash unless policyId.nil?
      _h['policyType'] = policyType.to_jaxb_json_hash unless policyType.nil?
      _h['policyNumber'] = policyNumber.to_jaxb_json_hash unless policyNumber.nil?
      _h['policyEffectiveDate'] = policyEffectiveDate.to_jaxb_json_hash unless policyEffectiveDate.nil?
      _h['policyExpirationDate'] = policyExpirationDate.to_jaxb_json_hash unless policyExpirationDate.nil?
      _h['policyPremium'] = policyPremium.to_jaxb_json_hash unless policyPremium.nil?
      return _h
    end

    # the json (string form) for this Policy
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Policy with a json hash
    def init_jaxb_json_hash(_o)
      @policyId = String.from_json(_o['policyId']) unless _o['policyId'].nil?
      @policyType = String.from_json(_o['policyType']) unless _o['policyType'].nil?
      @policyNumber = String.from_json(_o['policyNumber']) unless _o['policyNumber'].nil?
      @policyEffectiveDate = Time.from_json(_o['policyEffectiveDate']) unless _o['policyEffectiveDate'].nil?
      @policyExpirationDate = Time.from_json(_o['policyExpirationDate']) unless _o['policyExpirationDate'].nil?
      @policyPremium = Float.from_json(_o['policyPremium']) unless _o['policyPremium'].nil?
    end

    # constructs a Policy from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class Vehicle.
  class Vehicle 

    # the vehicleId
    attr_accessor :vehicleId
    # the make
    attr_accessor :make
    # the model
    attr_accessor :model
    # the year
    attr_accessor :year
    # the vin
    attr_accessor :vin
    # the licensePlate
    attr_accessor :licensePlate
    # the vehiclePhoto
    attr_accessor :vehiclePhoto

    # the json hash for this Vehicle
    def to_jaxb_json_hash
      _h = {}
      _h['vehicleId'] = vehicleId.to_jaxb_json_hash unless vehicleId.nil?
      _h['make'] = make.to_jaxb_json_hash unless make.nil?
      _h['model'] = model.to_jaxb_json_hash unless model.nil?
      _h['year'] = year.to_jaxb_json_hash unless year.nil?
      _h['vin'] = vin.to_jaxb_json_hash unless vin.nil?
      _h['licensePlate'] = licensePlate.to_jaxb_json_hash unless licensePlate.nil?
      _h['vehiclePhoto'] = vehiclePhoto.to_jaxb_json_hash unless vehiclePhoto.nil?
      return _h
    end

    # the json (string form) for this Vehicle
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Vehicle with a json hash
    def init_jaxb_json_hash(_o)
      @vehicleId = String.from_json(_o['vehicleId']) unless _o['vehicleId'].nil?
      @make = String.from_json(_o['make']) unless _o['make'].nil?
      @model = String.from_json(_o['model']) unless _o['model'].nil?
      @year = Fixnum.from_json(_o['year']) unless _o['year'].nil?
      @vin = String.from_json(_o['vin']) unless _o['vin'].nil?
      @licensePlate = String.from_json(_o['licensePlate']) unless _o['licensePlate'].nil?
      @vehiclePhoto = String.from_json(_o['vehiclePhoto']) unless _o['vehiclePhoto'].nil?
    end

    # constructs a Vehicle from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class TowingCompany.
  class TowingCompany 

    # the name
    attr_accessor :name
    # the address1
    attr_accessor :address1
    # the address2
    attr_accessor :address2
    # the city
    attr_accessor :city
    # the province
    attr_accessor :province
    # the pinCode
    attr_accessor :pinCode
    # the phone
    attr_accessor :phone
    # the emailId
    attr_accessor :emailId

    # the json hash for this TowingCompany
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['address1'] = address1.to_jaxb_json_hash unless address1.nil?
      _h['address2'] = address2.to_jaxb_json_hash unless address2.nil?
      _h['city'] = city.to_jaxb_json_hash unless city.nil?
      _h['province'] = province.to_jaxb_json_hash unless province.nil?
      _h['pinCode'] = pinCode.to_jaxb_json_hash unless pinCode.nil?
      _h['phone'] = phone.to_jaxb_json_hash unless phone.nil?
      _h['emailId'] = emailId.to_jaxb_json_hash unless emailId.nil?
      return _h
    end

    # the json (string form) for this TowingCompany
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this TowingCompany with a json hash
    def init_jaxb_json_hash(_o)
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @address1 = String.from_json(_o['address1']) unless _o['address1'].nil?
      @address2 = String.from_json(_o['address2']) unless _o['address2'].nil?
      @city = String.from_json(_o['city']) unless _o['city'].nil?
      @province = String.from_json(_o['province']) unless _o['province'].nil?
      @pinCode = String.from_json(_o['pinCode']) unless _o['pinCode'].nil?
      @phone = Fixnum.from_json(_o['phone']) unless _o['phone'].nil?
      @emailId = String.from_json(_o['emailId']) unless _o['emailId'].nil?
    end

    # constructs a TowingCompany from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class PaymentResponse.
  class PaymentResponse 

    # the reponseStatus
    attr_accessor :reponseStatus
    # the responseDescription
    attr_accessor :responseDescription

    # the json hash for this PaymentResponse
    def to_jaxb_json_hash
      _h = {}
      _h['reponseStatus'] = reponseStatus.to_jaxb_json_hash unless reponseStatus.nil?
      _h['responseDescription'] = responseDescription.to_jaxb_json_hash unless responseDescription.nil?
      return _h
    end

    # the json (string form) for this PaymentResponse
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this PaymentResponse with a json hash
    def init_jaxb_json_hash(_o)
      @reponseStatus = String.from_json(_o['reponseStatus']) unless _o['reponseStatus'].nil?
      @responseDescription = String.from_json(_o['responseDescription']) unless _o['responseDescription'].nil?
    end

    # constructs a PaymentResponse from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class MessageDetails.
  class MessageDetails 

    # the messageId
    attr_accessor :messageId
    # the messageDetail
    attr_accessor :messageDetail

    # the json hash for this MessageDetails
    def to_jaxb_json_hash
      _h = {}
      _h['messageId'] = messageId.to_jaxb_json_hash unless messageId.nil?
      _h['messageDetail'] = messageDetail.to_jaxb_json_hash unless messageDetail.nil?
      return _h
    end

    # the json (string form) for this MessageDetails
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MessageDetails with a json hash
    def init_jaxb_json_hash(_o)
      @messageId = String.from_json(_o['messageId']) unless _o['messageId'].nil?
      @messageDetail = String.from_json(_o['messageDetail']) unless _o['messageDetail'].nil?
    end

    # constructs a MessageDetails from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class FaqDetail.
  class FaqDetail 

    # the faqId
    attr_accessor :faqId
    # the faqDetails
    attr_accessor :faqDetails

    # the json hash for this FaqDetail
    def to_jaxb_json_hash
      _h = {}
      _h['faqId'] = faqId.to_jaxb_json_hash unless faqId.nil?
      _h['faqDetails'] = faqDetails.to_jaxb_json_hash unless faqDetails.nil?
      return _h
    end

    # the json (string form) for this FaqDetail
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this FaqDetail with a json hash
    def init_jaxb_json_hash(_o)
      @faqId = String.from_json(_o['faqId']) unless _o['faqId'].nil?
      @faqDetails = String.from_json(_o['faqDetails']) unless _o['faqDetails'].nil?
    end

    # constructs a FaqDetail from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class Coverage.
  class Coverage 

    # the coverageId
    attr_accessor :coverageId
    # the coverageTypeId
    attr_accessor :coverageTypeId
    # the coverageAmount
    attr_accessor :coverageAmount
    # the coverageLimit
    attr_accessor :coverageLimit
    # the deductible
    attr_accessor :deductible

    # the json hash for this Coverage
    def to_jaxb_json_hash
      _h = {}
      _h['coverageId'] = coverageId.to_jaxb_json_hash unless coverageId.nil?
      _h['coverageTypeId'] = coverageTypeId.to_jaxb_json_hash unless coverageTypeId.nil?
      _h['coverageAmount'] = coverageAmount.to_jaxb_json_hash unless coverageAmount.nil?
      _h['coverageLimit'] = coverageLimit.to_jaxb_json_hash unless coverageLimit.nil?
      _h['deductible'] = deductible.to_jaxb_json_hash unless deductible.nil?
      return _h
    end

    # the json (string form) for this Coverage
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Coverage with a json hash
    def init_jaxb_json_hash(_o)
      @coverageId = String.from_json(_o['coverageId']) unless _o['coverageId'].nil?
      @coverageTypeId = String.from_json(_o['coverageTypeId']) unless _o['coverageTypeId'].nil?
      @coverageAmount = String.from_json(_o['coverageAmount']) unless _o['coverageAmount'].nil?
      @coverageLimit = String.from_json(_o['coverageLimit']) unless _o['coverageLimit'].nil?
      @deductible = String.from_json(_o['deductible']) unless _o['deductible'].nil?
    end

    # constructs a Coverage from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class BodyShop.
  class BodyShop 

    # the name
    attr_accessor :name
    # the address1
    attr_accessor :address1
    # the address2
    attr_accessor :address2
    # the city
    attr_accessor :city
    # the province
    attr_accessor :province
    # the pinCode
    attr_accessor :pinCode
    # the phone
    attr_accessor :phone
    # the emailId
    attr_accessor :emailId

    # the json hash for this BodyShop
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['address1'] = address1.to_jaxb_json_hash unless address1.nil?
      _h['address2'] = address2.to_jaxb_json_hash unless address2.nil?
      _h['city'] = city.to_jaxb_json_hash unless city.nil?
      _h['province'] = province.to_jaxb_json_hash unless province.nil?
      _h['pinCode'] = pinCode.to_jaxb_json_hash unless pinCode.nil?
      _h['phone'] = phone.to_jaxb_json_hash unless phone.nil?
      _h['emailId'] = emailId.to_jaxb_json_hash unless emailId.nil?
      return _h
    end

    # the json (string form) for this BodyShop
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this BodyShop with a json hash
    def init_jaxb_json_hash(_o)
      @name = String.from_json(_o['name']) unless _o['name'].nil?
      @address1 = String.from_json(_o['address1']) unless _o['address1'].nil?
      @address2 = String.from_json(_o['address2']) unless _o['address2'].nil?
      @city = String.from_json(_o['city']) unless _o['city'].nil?
      @province = String.from_json(_o['province']) unless _o['province'].nil?
      @pinCode = String.from_json(_o['pinCode']) unless _o['pinCode'].nil?
      @phone = Fixnum.from_json(_o['phone']) unless _o['phone'].nil?
      @emailId = String.from_json(_o['emailId']) unless _o['emailId'].nil?
    end

    # constructs a BodyShop from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Ibm

module Openinsurance

module Domain

  # The Class Billing.
  class Billing 

    # the policyId
    attr_accessor :policyId
    # the policyBalance
    attr_accessor :policyBalance
    # the lastPaymentDate
    attr_accessor :lastPaymentDate
    # the amountBalance
    attr_accessor :amountBalance

    # the json hash for this Billing
    def to_jaxb_json_hash
      _h = {}
      _h['policyId'] = policyId.to_jaxb_json_hash unless policyId.nil?
      _h['policyBalance'] = policyBalance.to_jaxb_json_hash unless policyBalance.nil?
      _h['lastPaymentDate'] = lastPaymentDate.to_jaxb_json_hash unless lastPaymentDate.nil?
      _h['amountBalance'] = amountBalance.to_jaxb_json_hash unless amountBalance.nil?
      return _h
    end

    # the json (string form) for this Billing
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Billing with a json hash
    def init_jaxb_json_hash(_o)
      @policyId = String.from_json(_o['policyId']) unless _o['policyId'].nil?
      @policyBalance = Float.from_json(_o['policyBalance']) unless _o['policyBalance'].nil?
      @lastPaymentDate = Time.from_json(_o['lastPaymentDate']) unless _o['lastPaymentDate'].nil?
      @amountBalance = Float.from_json(_o['amountBalance']) unless _o['amountBalance'].nil?
    end

    # constructs a Billing from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end
